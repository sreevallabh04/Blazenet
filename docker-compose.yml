version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  db:
    image: postgis/postgis:15-3.3
    container_name: blazenet_db
    environment:
      POSTGRES_DB: blazenet_db
      POSTGRES_USER: blazenet
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: blazenet_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: blazenet_api
    environment:
      - DATABASE_URL=postgresql://blazenet:password@db:5432/blazenet_db
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - ./data:/data
      - ./logs:/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Streamlit Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: blazenet_frontend
    environment:
      - API_URL=http://api:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./app/frontend:/app/frontend
      - ./data:/data
    depends_on:
      - api
    restart: unless-stopped

  # ML Training Service (optional, for model training)
  ml_trainer:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: blazenet_ml
    environment:
      - DATABASE_URL=postgresql://blazenet:password@db:5432/blazenet_db
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./app/ml:/app/ml
      - ./data:/data
      - ./logs:/logs
    depends_on:
      - db
    profiles:
      - training
    restart: "no"

volumes:
  postgres_data:
  redis_data: 